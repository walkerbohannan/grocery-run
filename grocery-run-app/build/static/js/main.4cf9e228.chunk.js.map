{"version":3,"sources":["bag.svg","Header.js","RecipeGroceriesDisplay.js","StatusMessage.js","RecipeSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","bag","alt","PureComponent","RecipeGroceriesDisplay","props","recipes","length","map","recipe","recipeIndex","href","url","title","ingredients","ingredient","ingredientIndex","type","id","name","value","htmlFor","StatusMessage","statusMessage","RecipeSearch","onSubmit","data","state","setState","fetch","proxyServer","method","headers","body","JSON","stringify","then","response","json","statusType","concat","catch","error","console","handleChange","bind","e","this","target","onChange","defaultValue","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAAe,G,YAAA,IAA0B,iC,OCIpBA,E,4JACjB,WACI,OACI,yBAAQC,UAAU,mBAAlB,UACI,qBAAKC,IAAKC,EAAKF,UAAU,WAAWG,IAAI,gBACxC,gF,GALoBC,iB,aCDrB,SAASC,EAAuBC,GAC3C,OAAIA,EAAMC,QAAQC,OAAS,EAEnB,sBAAKR,UAAW,cAAhB,UACI,yCACCM,EAAMC,QAAQE,KAAI,SAACC,EAAQC,GAAT,OACf,6BACI,mBAAGC,KAAMF,EAAOG,IAAhB,SAAsBH,EAAOI,SADxBH,MAIb,2CACCL,EAAMC,QAAQE,KAAI,SAACC,EAAQC,GAAT,OACf,8BACKD,EAAOK,YAAYN,KAAI,SAACO,EAAYC,GAAb,OACpB,+BACI,uBAAOC,KAAK,WAAWC,GAAIF,EAAiBG,KAAMH,EAAiBI,MAAOL,IAC1E,uBAAOM,QAASL,EAAhB,SAAkCD,MAF7BC,OAFPN,SAYf,K,MCxBA,SAASY,EAAcjB,GAClC,MAA4B,KAAxBA,EAAMkB,cAEF,qBAAKxB,UAAW,gBAAhB,SACKM,EAAMkB,gBAIR,K,UCLMC,E,kDACjB,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IAoBVoB,SAAW,WACP,IAAIC,EAAO,CACP,IAAO,EAAKC,MAAMf,KAEtB,EAAKgB,SAAS,CACVL,cAAe,+BAEnBM,MAAM,EAAKF,MAAMG,YAAa,CAC1BC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,KACtBU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAV,GACF,EAAKE,UAAS,SAAAD,GAYV,OAXgC,IAA5BD,EAAKZ,YAAYP,OACjB,EAAKqB,SAAS,CACVL,cAAe,8FACfgB,WAAY,SAGhB,EAAKX,SAAS,CACVL,cAAe,KAIhB,CAACjB,QADQqB,EAAMrB,QAAQkC,OAAOd,UAI5Ce,OAAM,SAAAC,GACHC,QAAQD,MAAM,uBACd,EAAKd,SAAS,CACVL,cAAe,qDACfgB,WAAY,cArDxB,EAAKZ,MAAQ,CACTG,YAAa,uEACblB,IAAK,oEACLN,QAAS,CAAC,CACNO,MAAO,GACPD,IAAK,GACLE,YAAa,KAEjBS,cAAe,GACfgB,WAAY,SAEhB,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKpB,SAAW,EAAKA,SAASoB,KAAd,gBAdD,E,gDAiBnB,SAAaC,GACTC,KAAKnB,SAAS,CAAEhB,IAAKkC,EAAEE,OAAO5B,U,oBA0ClC,WACI,OACI,sBAAKrB,UAAU,mBAAf,UACI,0BACIA,UAAW,kBACXmB,GAAI,kBACJ+B,SAAUF,KAAKH,aACfM,aAAcH,KAAKpB,MAAMf,MAE7B,wBACIM,GAAI,eACJiC,QAASJ,KAAKtB,SAFlB,0BAKA,cAAC,EAAD,CAAeF,cAAewB,KAAKpB,MAAMJ,gBACzC,cAAC,EAAD,CAAwBjB,QAASyC,KAAKpB,MAAMrB,iB,GA5ElBH,iBCDrBiD,E,4JACnB,WACE,OACI,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,W,GALuBjD,iBCOlBkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4cf9e228.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bag.2d8966b9.svg\";","import React, { PureComponent } from \"react\";\nimport \"./Header.css\"\nimport bag from \"./bag.svg\";\n\nexport default class Header extends PureComponent {\n    render() {\n        return (\n            <header className=\"component-header\">\n                <img src={bag} className=\"Bag-logo\" alt=\"grocery bag\" />\n                <h4>Enter the website for your recipe below</h4>\n            </header>\n        );\n    }\n}","import React from \"react\";\nimport './RecipeGroceriesDisplay.css'\n\nexport default function RecipeGroceriesDisplay(props) {\n    if (props.recipes.length > 1) {\n        return (\n            <div className={\"GroceryList\"}>\n                <h3>Recipes</h3>\n                {props.recipes.map((recipe, recipeIndex) => (\n                    <ul key={recipeIndex}>\n                        <a href={recipe.url}>{recipe.title}</a>\n                    </ul>\n                ))}\n                <h3>Groceries</h3>\n                {props.recipes.map((recipe, recipeIndex) => (\n                    <div key={recipeIndex}>\n                        {recipe.ingredients.map((ingredient, ingredientIndex) => (\n                            <ul key={ingredientIndex}>\n                                <input type=\"checkbox\" id={ingredientIndex} name={ingredientIndex} value={ingredient}/>\n                                <label htmlFor={ingredientIndex}>{ingredient}</label>\n                            </ul>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}","import './StatusMessage.css';\nimport React from 'react';\n\nexport default function StatusMessage(props) {\n    if (props.statusMessage !== '') {\n        return (\n            <div className={\"StatusMessage\"}>\n                {props.statusMessage}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}","import React, { PureComponent } from \"react\";\nimport RecipeGroceriesDisplay from \"./RecipeGroceriesDisplay\"\nimport StatusMessage from \"./StatusMessage\"\n\nimport \"./RecipeSearch.css\";\n\nexport default class RecipeSearch extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            proxyServer: 'https://us-central1-grocery-run-app.cloudfunctions.net/server/recipe',\n            url: 'https://smittenkitchen.com/2020/06/whole-lemon-meringue-pie-bars/',\n            recipes: [{\n                title: '',\n                url: '',\n                ingredients: []\n            }],\n            statusMessage: '',\n            statusType: 'error'\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({ url: e.target.value });\n    }\n\n    onSubmit = () => {\n        let data = {\n            \"url\": this.state.url\n        }\n        this.setState({\n            statusMessage: 'Parsing out ingredients...'\n        })\n        fetch(this.state.proxyServer, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }).then(response => response.json())\n            .then(data => {\n                this.setState(state => {\n                    if (data.ingredients.length === 0) {\n                        this.setState({\n                            statusMessage: \"Couldn't parse out ingredients from that link. Maybe bribe the devs to add that website? =)\",\n                            statusType: 'warn'\n                        })\n                    } else {\n                        this.setState({\n                            statusMessage: ''\n                        })\n                    }\n                    const recipes = state.recipes.concat(data);\n                    return {recipes}\n                })\n            })\n            .catch(error => {\n                console.error(\"Error parsing data.\");\n                this.setState({\n                    statusMessage: \"Couldn't get your ingredients: server unavailable.\",\n                    statusType: 'error'\n                })\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"component-search\">\n                <textarea\n                    className={\"text-area-input\"}\n                    id={\"website-content\"}\n                    onChange={this.handleChange}\n                    defaultValue={this.state.url}\n                />\n                <button\n                    id={\"fetch-recipe\"}\n                    onClick={this.onSubmit}>\n                    Fetch Recipe\n                </button>\n                <StatusMessage statusMessage={this.state.statusMessage}/>\n                <RecipeGroceriesDisplay recipes={this.state.recipes}/>\n            </div>\n        );\n    }\n}","import './App.css';\nimport React, { PureComponent } from \"react\";\nimport Header from \"./Header\"\nimport RecipeSearch from \"./RecipeSearch\"\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n        <div>\n          <Header />\n          <RecipeSearch />\n        </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}